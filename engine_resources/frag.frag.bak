#version 430 core
#define PI 3.14159265359

out vec4 FragColor;
in vec2 vPosition;

struct Material {
	vec3 albedo;
	float roughness;
	float metalic;
	float absorb;
	float specular;
};

struct Sphere {
	vec3 centre;
	float radius;
};

struct Box {
	vec3 min;
	vec3 max;
};

struct Ray{
	vec3 origin;
	vec3 direction;
};

struct Payload{
	float distance;
	vec3 normal;
	int object_id;
	int material_id;
};

uniform float aspec;
uniform float time;
uniform float sphereRadius;
uniform mat4 matrix;
uniform vec3 orientation;
uniform vec3 sphereloc;
uniform vec3 boxBounds;
uniform vec3 cameraPos;
uniform vec3 boxPos;
uniform samplerCube cubemap;
uniform Material material;
uniform uint bounces;
uniform uint state;

uint unDState;
uint dState = 22;

Payload min(Payload p1, Payload p2){
	if(p1.distance < 0.0 )
		return p2;
	if(p2.distance < 0.0 )
		return p1;
	if(p1.distance < p2.distance)
		return p1;		
	return p2;
}

// fixed through space
float rand() {
	unDState = unDState* 747796405+2891336453;
	uint result = ((unDState >> ((unDState >> 28) + 4 )) ^ unDState) * 277803737;
	result = (result >> 22) ^ result;
	return result / 4294967295.0;
}

// fixed through space
vec3 randVec() { 
	return vec3(rand(),rand(),rand());
}

// random through time and space
float randPixel() {
    return fract(sin(dot(vPosition,
                         vec2(12.9898,78.233)))*
        43758.5453123 + fract(time/5000.0) );
}

// random through time and space
vec3 randVecPixel() {
    return vec3(
	fract(sin(dot(vPosition, vec2(12.3898,78.233)))*43758.5453123 + fract(time/400.0)),
	fract(sin(dot(vPosition, vec2(12.9498,78.233)))*43758.5453123 + fract(time/400.0) ),
	fract(sin(dot(vPosition, vec2(12.1828,78.233)))*43758.5453123 + fract(time/400.0) )
	);
}

// Fixed through time
float randD() {
	return fract(sin(dot(vPosition, vec2(12.3898,78.233)))*43758.5453123 );
}

// Fixed through time
vec3 randVecD() {
    return vec3(
	fract(sin(dot(vPosition, vec2(12.3898,78.233)))*43758.5453123 ),
	fract(sin(dot(vPosition, vec2(12.9498,78.233)))*43758.5453123 ),
	fract(sin(dot(vPosition, vec2(12.1828,78.233)))*43758.5453123 )
	);
}

//if breaks use the one over it 
// Fixed through time and space
float randDST() {
	dState = dState* 747796405+2891336453;
	uint result = ((dState >> ((dState >> 28) + 4 )) ^ dState) * 277803737;
	result = (result >> 22) ^ result;
	return result / 4294967295.0 ;
}

// Fixed through time and space
vec3 randVecDST(){
	return vec3(
		randD(),
		randD(),
		randD()
	);
}


vec3 reflect(Ray ray, vec3 normal, Material mataterial) {
    return ray.direction -mataterial.specular * normal*dot(ray.direction,normal);
}

Ray rayGen() {
	vec3 rayOrigin = cameraPos;
	vec2 coord = vec2(vPosition.x*aspec,vPosition.y);
	vec3 rayDirection = (matrix * vec4(normalize(vec3(coord,-1)),0)).xyz;


	return Ray(rayOrigin,rayDirection);
}

Payload intersect(Ray ray, Sphere sphere) {
	
	Payload payload = Payload( -1.0, vec3(0.0), 1, -1 );

    vec3 originToSphere = ray.origin - sphere.centre;

    float p = dot(ray.direction, originToSphere);
    float q = dot(originToSphere, originToSphere) - (sphere.radius * sphere.radius);

    float d = (p * p) - q;
    if (d < 0.0)
        return payload;

    float dist = -p - sqrt(d);

	if( dist > 0.0) {
		vec3 point = ray.origin + ray.direction * dist;
		vec3 centreToPoint = sphere.centre - point;

		payload.distance = dist;
		payload.normal = centreToPoint/sphere.radius;
		payload.object_id = 0;

		return payload;
	}

	return payload;
}

Payload intersect(Ray ray, Box box){

	Payload payload = Payload( -1.0,vec3(0.0),0);

	vec3 tMin = (box.min - ray.origin) / ray.direction;
    vec3 tMax = (box.max - ray.origin) / ray.direction;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
	
	if( tNear > tFar || tNear < 0.0 )
		return payload;

	vec3 intersectionPoint = ray.origin + ray.direction * tNear;

	vec3 normal;
	float epsilon = 1e-4;
    if (abs(intersectionPoint.x - box.min.x) < epsilon) 
		normal = vec3(-1, 0, 0);
    else if (abs(intersectionPoint.x - box.max.x) < epsilon) 
		normal = vec3(1, 0, 0);
    else if (abs(intersectionPoint.y - box.min.y) < epsilon)	
		normal = vec3(0, -1, 0);
    else if (abs(intersectionPoint.y - box.max.y) < epsilon) 
		normal = vec3(0, 1, 0);
    else if (abs(intersectionPoint.z - box.min.z) < epsilon) 
		normal = vec3(0, 0, -1);
    else if (abs(intersectionPoint.z - box.max.z) < epsilon) 
		normal = vec3(0, 0, 1);

	payload.distance = tNear;
	payload.normal = normal;
	payload.object_id = 0;

	return payload;
}

Payload closestHit(Ray ray){
	Sphere sphere;
	sphere.radius = sphereRadius;
	sphere.centre = sphereloc;

	Box box;
	box.min = vec3(0,0,0) + boxPos;
	box.max = vec3(1,1,1) * boxBounds + boxPos;
	

	Payload payload = intersect(ray,box);
	payload = min(payload,intersect(ray,sphere));

	return payload; 
}

vec3 miss(Ray ray){
	return texture(cubemap, ray.direction).xyz;
}

vec3 computeColor(Material mat, Ray ray, vec3 normal){
	return vec3(1.0);
}


vec3 traceRay(Ray ray){

	Payload payload;
	vec3 color = vec3(1.0);
	unDState = state;
	
	vec3 randVector = randVec();
	for(int i = 0; i<bounces; i++) {
		payload = closestHit(ray);

		if(payload.distance < 0.0) 
			return color*miss(ray).xyz;
		
		color = color * vec3(0.8,0.49,0.35);
		ray.origin += ray.direction*payload.distance;
		// ray.direction = reflect(ray.direction, normalize(payload.normal + (2*randVecPixel()-1)*material.roughness) );
		ray.direction = normalize(payload.normal + (2*randVecPixel()-1)*material.roughness);
		ray.origin += ray.direction*0.0001;

	}

	 return texture(cubemap, ray.direction ).xyz ;
};





void main() {
	Ray ray = rayGen();
	const int samples = 3;
	vec3 color = vec3(0);
	
	for(int i = 1; i <=samples; i++) {
		Ray newRay = ray;
		newRay.direction = normalize(newRay.direction + vec3(2*randDST()-1) /800.0);
		color += traceRay(newRay);
	}
	color = color/float(samples);

	FragColor = vec4(color,1.0);

	float gamma = 1.0;
	FragColor = vec4(pow(FragColor.x,gamma),pow(FragColor.y,gamma),pow(FragColor.z,gamma),1.0);
}